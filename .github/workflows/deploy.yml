# (c) 2023 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Terraform Project Deploy
on:
  workflow_dispatch:

  push:
    tags:
      - v*
    branches:
      - develop
      - support/**
      - release/**
    paths-ignore:
      - .github/workflows/**
      - modules/**

concurrency: deploy-${{ github.repository }}-${{ github.ref }}


jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      # Get source of Configuration parameters (sensitive information)
      - name: Get Configuration source
        id: config_source
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.parameters.source' ./cloudopsworks-ci.yaml

      # Get Terraform SSM Parameter List
      - name: Get Terraform SSM Parameter List
        id: terraform_init_ssm
        if: steps.config_source.outputs.result == 'aws-ssm'
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.aws-ssm.paths.init' ./cloudopsworks-ci.yaml

      - name: Get region from terraform.tfvars
        id: aws_region
        if: steps.config_source.outputs.result == 'aws-ssm' || steps.config_source.outputs.result == 's3'
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.aws-ssm.region' ./cloudopsworks-ci.yaml

      - name: Get the deployments configuration
        id: deploy_conf
        uses: mikefarah/yq@master
        with:
          cmd: yq -o=json -I=0 '.cd.deployments' cloudopsworks-ci.yaml

      - name: Download TF init file from SSM
        id: tf_backend
        if: steps.config_source.outputs.result == 'aws-ssm'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ steps.aws_region.outputs.result }}
        run: |
          ssm_param="${{ steps.terraform_init_ssm.outputs.result }}"
          mkdir .deploy
          aws ssm get-parameters --names $ssm_param --query "Parameters[0].Value" --output text > .deploy/remote.tfbackend
          
          echo "config=.deploy/remote.tfbackend" >> $GITHUB_OUTPUT

      - name: Terraform Init
        id: init
        run: terraform init -input=false -backend-config=${{ steps.tf_backend.outputs.config }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Set the appropriate workspace from what is configured from the deploy_conf step
      # Result is stored as JSON with the format found on the cd.deployments section on cloudopsworks-ci.yaml
      - name: Set the appropriate workspace
        id: workspace
        uses: actions/github-script@v6
        with:
          script: |
            const deployments = JSON.parse('${{ steps.deploy_conf.outputs.result }}');
            const branch = '${{ github.ref_name }}';
            
            var tfWorkspace;
            var tfPrefix;
            var isRelease = false;
            var isPreRelease = false;
            if ( branch.startsWith('support') ) {
              const oneMatch = deployments.support.find( ({ match }) => branch.match(new RegExp('support/'+match,'g')) );
              tfWorkspace = oneMatch.env;
              tfPrefix = oneMatch.terraformPrefix;
            } else if ( branch.startsWith('release') || branch.match(/^v[0-9]+\.[0-9]+\.[0-9]+-.*[-\.].*/) ) {            
              // Regular expression to match following semver pattern: v1.0.2-alpha.10-uoiretu834u
              isPreRelease = true;
              tfWorkspace = deployments.release.env;
              tfPrefix = deployments.release.terraformPrefix;
            } else if ( branch === 'develop' ) {
              tfWorkspace = deployments.develop.env;
              tfPrefix = deployments.develop.terraformPrefix;
            } else if ( branch === 'main' || branch === 'master' || branch.match(/^v[0-9]+\.[0-9]+\.[0-9]+$/) ) {
              isRelease = true;
              tfWorkspace = deployments.main.env;
              tfPrefix = deployments.main.terraformPrefix;
            } else {
              core.setFailed('Branch not supported');
            }
            const outputV = { 
              workspace: tfWorkspace, 
              prefix: tfPrefix, 
              isPreRelease: isPreRelease, 
              isRelease: isRelease
            }; 
            core.setOutput('workspace', tfWorkspace);
            core.setOutput('prefix', tfPrefix);
            core.setOutput('isRelease', isRelease);
            core.setOutput('isPreRelease', isPreRelease);
            
            return outputV;

      - name: Create Plan Directory
        run: mkdir -p ./.plans

      - name: Terraform Workspace Check Existence and Selection
        id: workspace_check
        run: |
          terraform workspace select ${{ steps.workspace.outputs.workspace }}
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Workspace Create
        if: steps.workspace_check.outcome == 'failure'
        run: |
          terraform workspace new ${{ steps.workspace.outputs.workspace }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file tfvars/${{ steps.workspace.outputs.prefix }}.terraform.tfvars  -input=false -no-color -out ./.plans/plan.out
        continue-on-error: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
#          HELM_CREDS_USER: ${{ secrets.HELM_CREDENTIAL_USER }}
#          HELM_CREDS_PASSWORD: ${{ secrets.HELM_CREDENTIAL_PASSWORD }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -no-color ./.plans/plan.out
        continue-on-error: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
#          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
#          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Create a VERSION file to use through the build
      - name: Set Version File
        if: ${{ steps.workspace.outputs.isRelease == 'true' || steps.workspace.outputs.isPreRelease == 'true' }}
        env:
          NEXT_VERSION: "${{ github.ref_name }}"
        run: |
          echo -n "$NEXT_VERSION" > VERSION

      # Output Changelog from previous tag
      - name: Changelog
        if: ${{ steps.workspace.outputs.isRelease == 'true' || steps.workspace.outputs.isPreRelease == 'true' }}
        uses: heinrichreimer/action-github-changelog-generator@v2.3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          output: CHANGELOG.md

      # Create GitHub Release
      - name: GitHub Release
        if: ${{ steps.workspace.outputs.isRelease == 'true' || steps.workspace.outputs.isPreRelease == 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.BOT_TOKEN }}
          name: "Release ${{ github.ref_name }}"
          body_path: CHANGELOG.md
          prerelease: ${{ steps.workspace.outputs.isPreRelease }}

#      # Push the changes to Git TAG before deploying anything
#      - name: Release Version
#        if: github.ref == 'master'
#        env:
#          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
#        run: |
#          VERSION=$(cat VERSION)
#          git config --global user.name "${{ vars.BOT_USER }}"
#          git config --global user.email "${{ vars.BOT_EMAIL }}"
#          git tag -fa v$VERSION -m "Environment Release v$VERSION"
#          git push origin v$VERSION
