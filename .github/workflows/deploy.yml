# (c) 2022 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Terraform Project Deploy
on:
  workflow_dispatch:
    
  push:
    branches:
      - master
      - dev*
      - prod*
      - stag*
    paths-ignore:
      - ".github/workflows/**"
      - "modules/**"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      # Get previous tags in order to proceed to generate next version
      - name: Get Previous tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        id: previoustag
        with:
          fallback: 1.0.0
        env:
          GITHUB_TOKEN: "${{ secrets.BOT_TOKEN }}"
      # Generate next SEMVER number
      - name: Next Semver
        uses: WyriHaximus/github-action-next-semvers@v1
        id: semvers
        with:
          version: "${{ steps.previoustag.outputs.tag }}"

      - name: Download yq Binary
        env:
          VERSION: v4.23.1
          BINARY: yq_linux_amd64
        run: |
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | tar xz && mv ${BINARY} /usr/local/bin/yq

      # Get source of Configuration parameters (sensitive information)
      - name: Get Configuration source
        id: config_source
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.parameters.source' ./cloudopsworks-ci.yaml

      # Get Terraform SSM Parameter List
      - name: Get Terraform SSM Parameter List
        id: terraform_init_ssm
        if: steps.config_source.outputs.result == 'aws-ssm'
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.aws-ssm.paths.init' ./cloudopsworks-ci.yaml

      - name: Get region from terraform.tfvars
        id: aws_region
        if: steps.config_source.outputs.result == 'aws-ssm' || steps.config_source.outputs.result == 's3'
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.aws-ssm.region' ./cloudopsworks-ci.yaml

      - name: Download TF init file from SSM
        id: tf_backend
        if: steps.config_source.outputs.result == 'aws-ssm'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ steps.aws_region.outputs.result }}
        run: |
          ssm_param="${{ steps.terraform_init_ssm.outputs.result }}"
          mkdir .deploy
          aws ssm get-parameters --names $ssm_param --query "Parameters[0].Value" --output text > .deploy/remote.tfbackend
          
          echo "config=.deploy/remote.tfbackend" >> $GITHUB_OUTPUT

      - name: Terraform Init
        id: init
        run: terraform init -input=false -backend-config=${{ steps.tf_backend.outputs.config }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Create Plan Directory
        run: mkdir -p ./.plans

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out ./.plans/plan.out
        continue-on-error: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
#          HELM_CREDS_USER: ${{ secrets.HELM_CREDENTIAL_USER }}
#          HELM_CREDS_PASSWORD: ${{ secrets.HELM_CREDENTIAL_PASSWORD }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -no-color ./.plans/plan.out
        continue-on-error: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
#          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
#          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Create a VERSION file to use through the build
      - name: Set Version File
        id: release
        env:
          NEXT_VERSION: "${{ steps.semvers.outputs.patch }}"
        run: |
          echo -n "$NEXT_VERSION" > VERSION
          
          echo "release_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      # Push the changes to Git TAG before deploying anything
      - name: Release Version
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          VERSION=$(cat VERSION)
          git config --global user.name "${{ secrets.BOT_USER }}"
          git config --global user.email "${{ secrets.BOT_EMAIL }}"
          git tag -fa v$VERSION -m "Environment Release v$VERSION"
          git push origin v$VERSION
