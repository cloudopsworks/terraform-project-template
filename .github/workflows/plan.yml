##
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Terraform Project Plan on Pull request
on:
  pull_request:
    branches:
      - main
      - master
      - develop
      - support/**
      - release/**
    paths-ignore:
      #      - .github/workflows/**
      - modules/**

concurrency:
  group: plan-deploy-${{ github.repository }}
  cancel-in-progress: false


permissions:
  contents: read
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      auto_approve: ${{ steps.check_automatic.outputs.result }}
      is_release: ${{ steps.workspace.outputs.isRelease }}
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      - name: Check if automatic
        id: check_automatic
        uses: mikefarah/yq@master
        with:
          cmd: yq '.cd.automatic' ./cloudopsworks-ci.yaml | tr '[:upper:]' '[:lower:]'

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # Get source of Configuration parameters (sensitive information)
      - name: Get Configuration source
        id: config_source
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.parameters.source' ./cloudopsworks-ci.yaml

      - name: Get the deployments configuration
        id: deploy_conf
        uses: mikefarah/yq@master
        with:
          cmd: yq -o=json -I=0 '.cd.deployments' cloudopsworks-ci.yaml

      # Get Terraform SSM Parameter List
      - name: Get Terraform SSM Parameter List
        id: terraform_init_ssm
        if: steps.config_source.outputs.result == 'aws-ssm'
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.aws-ssm.paths.init' ./cloudopsworks-ci.yaml

      - name: Get region from terraform.tfvars
        id: aws_region
        if: steps.config_source.outputs.result == 'aws-ssm' || steps.config_source.outputs.result == 's3'
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.aws-ssm.region' ./cloudopsworks-ci.yaml

      - name: Download TF init file from SSM
        id: tf_backend
        if: steps.config_source.outputs.result == 'aws-ssm'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ steps.aws_region.outputs.result }}
        run: |
          ssm_param="${{ steps.terraform_init_ssm.outputs.result }}"
          mkdir .deploy
          aws ssm get-parameters --names $ssm_param --query "Parameters[0].Value" --output text > .deploy/remote.tfbackend
          
          echo "config=.deploy/remote.tfbackend" >> $GITHUB_OUTPUT

      - name: Terraform Init With Remote Backend
        id: init_remote
        if: steps.config_source.outputs.result != 'none'
        run: terraform init -input=false -backend-config=${{ steps.tf_backend.outputs.config }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Init
        id: init
        if: steps.config_source.outputs.result == 'none'
        run: terraform init -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Set the appropriate workspace from what is configured from the deploy_conf step
      # Result is stored as JSON with the format found on the cd.deployments section on cloudopsworks-ci.yaml
      - name: Set the appropriate workspace
        id: workspace
        uses: actions/github-script@v6
        with:
          script: |
            const deployments = JSON.parse('${{ steps.deploy_conf.outputs.result }}');
            const branch = '${{ github.head_ref }}';
            const base_branch = '${{ github.base_ref }}';
            
            var tfWorkspace;
            var tfPrefix;
            var isRelease = false;
            var isPreRelease = false;
            var isEnabled = true;
            if ( base_branch.startsWith('support') ) {
              const oneMatch = deployments.support.find( ({ match }) => branch.match(new RegExp('support/'+match,'g')) );
              tfWorkspace = oneMatch.env;
              tfPrefix = oneMatch.terraformPrefix;
            } else if ( base_branch.startsWith('release') ) {
              isEnabled = (deployments.test['enabled'] == null ? true : (deployments.test['enabled'] === 'true'));
              tfWorkspace = deployments.test.env;
              tfPrefix = deployments.test.terraformPrefix;
            } else if ( base_branch === 'develop' ) {
              isEnabled = (deployments.develop['enabled'] == null ? true : (deployments.develop['enabled'] === 'true'));
              tfWorkspace = deployments.develop.env;
              tfPrefix = deployments.develop.terraformPrefix;
            } else if ( base_branch === 'master' || base_branch === 'main' ) {
              isRelease = true;
              tfWorkspace = deployments.release.env;
              tfPrefix = deployments.release.terraformPrefix;
            } else {
              core.setFailed('Branch not supported');
            }            
            
            const outputV = { 
              workspace: tfWorkspace, 
              prefix: tfPrefix, 
              isPreRelease: isPreRelease, 
              isRelease: isRelease,
              isEnabled: isEnabled
            };
            core.setOutput('workspace', tfWorkspace);
            core.setOutput('prefix', tfPrefix);
            core.setOutput('isRelease', isRelease);
            core.setOutput('isPreRelease', isPreRelease);
            core.setOutput('isEnabled', isEnabled);
            
            return outputV;

      - name: Terraform Workspace Check and Selection
        id: workspace_check
        continue-on-error: true
        run: |
          terraform workspace select ${{ steps.workspace.outputs.workspace }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Workspace Create
        if: steps.workspace_check.outcome == 'failure'
        run: |
          terraform workspace new ${{ steps.workspace.outputs.workspace }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Create Plan Directory
        run: mkdir -p ./.plans
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file tfvars/${{ steps.workspace.outputs.prefix }}.terraform.tfvars -input=false -no-color -out ./.plans/plan.out 2>&1 | tee ./.plans/plan.log
        continue-on-error: ${{ steps.check_automatic.output.result != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          #HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          #HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - uses: actions/upload-artifact@v3
        with:
          name: environment-release-plan
          path: |
            ./.plans/plan.out
            ./.plans/plan.log
          #if-no-files-found: error

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const fs = require('fs');
            let plan = fs.readFileSync('./.plans/plan.log', 'utf8');
            const MAX_GITHUB_COMMENT_LENGTH = 65536;

            if (plan.length > MAX_GITHUB_COMMENT_LENGTH) {
              plan = "Please review the plan in github actions logs because it's too long"
            }

            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Workspace 🏢\`${{ steps.workspace.outputs.workspace }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${plan}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Hard Fail plan not success
        run: |
          result_fmt="${{ steps.fmt.outcome }}"
          result_init="${{ steps.init.outcome }}"
          result_init_r="${{ steps.init_remote.outcome }}"
          result_plan="${{ steps.plan.outcome }}"
          
          if [[ "$result_fmt" == "success" && ("$result_init" == "success" || "$result_init_r" == "success") && "$result_plan" == "success" ]] ; then
            echo "All OK... nothing todo"
          else
            echo "FMT=$result_fmt\nINIT=$result_init\nPLAN=$result_plan\nIt's NOT OK, will hard fail."
            exit 1
          fi
  # Proceed with labeling if the procedure is candidate to be autoapproved
  label_autoapprove:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ github.base_ref != 'master' && github.base_ref != 'main' && ( ! startsWith(github.base_ref, 'support') ) && github.event_name == 'pull_request' }}
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approved', 'automatic-environment']
            })

  # Job to add the required reviewers and approvals to the PR
  add_reviewers_and_approvals:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ ( github.base_ref == 'master' || github.base_ref == 'main' || startsWith(github.base_ref, 'support') ) && github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Read required Reviewers from config file
        id: reviewers_count
        uses: mikefarah/yq@master
        with:
          cmd: yq '.config.requiredReviewers' ./cloudopsworks-ci.yaml

      - name: Read all reviewers from config file
        id: reviewers_json
        uses: mikefarah/yq@master
        with:
          cmd: yq -o=json -I=0 '.config.reviewers' ./cloudopsworks-ci.yaml

      - name: Add review and approval labels
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const reviewers_json=JSON.parse('${{ steps.reviewers_json.outputs.result }}');
            const reviewers_count=${{ steps.reviewers_count.outputs.result }};
            const labels = ['approval-required','review-required'];
            const actor = '${{ github.event.pull_request.user.login }}'

            var reviewers = []
            for ( const rev of reviewers_json ) {
              if ( actor != rev ) {
                reviewers.push(rev)
              }
            }

            github.rest.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: reviewers
            });

            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });

  # Place a do-not-merge label untl all the conditions are met
  #   the conditions are:
  #     labels are: blue-green/new or blue-green/complete
  do_not_merge_label:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ ( github.base_ref == 'master' || github.base_ref == 'main' || startsWith(github.base_ref, 'support') ) && github.event_name == 'pull_request' }}
    outputs:
      is_mergeable: ${{ steps.check.outputs.result }}
    steps:
      - name: Set DO-NOT-MERGE if not in last step
        id: check
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const {data: pullLabels} = await github.rest.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const labels = pullLabels.map(label => label.name);

            var is_mergeable = false;

            for (const aLabel of labels) {
              if ( aLabel == 'blue-green/new' || aLabel == 'approved' ) {
                is_mergeable = true;
              }
            }

            if ( ! is_mergeable ) {
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [ 'do-not-merge' ]
              });
            }

            return ( is_mergeable ? 'true' : 'false' );

