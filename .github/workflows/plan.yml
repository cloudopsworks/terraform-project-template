##
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Terraform Project Plan on Pull request
on:
  pull_request:
    branches:
      - main
      - master
      - develop
      - support/**
      - release/**
    paths-ignore:
      - .github/workflows/**
      - modules/**

concurrency: plan-terraform-project

permissions:
  contents: read
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      auto_approve: ${{ steps.check_automatic.outputs.result }}
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Download yq Binary
        env:
          VERSION: v4.23.1
          BINARY: yq_linux_amd64
        run: |
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | tar xz && mv ${BINARY} /usr/local/bin/yq

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      - name: Check if automatic
        id: check_automatic
        uses: mikefarah/yq@master
        with:
          cmd: yq '.cd.automatic' ./cloudopsworks-ci.yaml | tr '[:upper:]' '[:lower:]'

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # Get source of Configuration parameters (sensitive information)
      - name: Get Configuration source
        id: config_source
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.parameters.source' ./cloudopsworks-ci.yaml

      - name: Get the deployments configuration
        id: deploy_conf
        uses: mikefarah/yq@master
        with:
          cmd: yq -o=json -I=0 '.cd.deployments' cloudopsworks-ci.yaml

      # Get Terraform SSM Parameter List
      - name: Get Terraform SSM Parameter List
        id: terraform_init_ssm
        if: steps.config_source.outputs.result == 'aws-ssm'
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.aws-ssm.paths.init' ./cloudopsworks-ci.yaml

      - name: Get region from terraform.tfvars
        id: aws_region
        if: steps.config_source.outputs.result == 'aws-ssm' || steps.config_source.outputs.result == 's3'
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.aws-ssm.region' ./cloudopsworks-ci.yaml

      - name: Download TF init file from SSM
        id: tf_backend
        if: steps.config_source.outputs.result == 'aws-ssm'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ steps.aws_region.outputs.result }}
        run: |
          ssm_param="${{ steps.terraform_init_ssm.outputs.result }}"
          mkdir .deploy
          aws ssm get-parameters --names $ssm_param --query "Parameters[0].Value" --output text > .deploy/remote.tfbackend
          
          echo "config=.deploy/remote.tfbackend" >> $GITHUB_OUTPUT

      - name: Terraform Init
        id: init
        run: terraform init -input=false -backend-config=${{ steps.tf_backend.outputs.config }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}


      # Set the appropriate workspace from what is configured from the deploy_conf step
      # Result is stored as JSON with the format found on the cd.deployments section on cloudopsworks-ci.yaml
      - name: Set the appropriate workspace
        id: workspace
        uses: actions/github-script@v6
        with:
          script: |
            const deployments = JSON.parse('${{ steps.deploy_conf.outputs.result }}');
            const branch = '${{ context.ref }}';
            
            var tfWorkspace;
            var tfPrefix;
            if ( branch.startsWith('support') ) {
              const oneMatch = deployments.support.find( ({ match }) => branch.match(new RegExp('support/'+match,'g')) );
              tfWorkspace = oneMatch.env;
              tfPrefix = oneMatch.terraformPrefix;
            } else if ( branch.startsWith('release') ) {
              tfWorkspace = deployments.release.env;
              tfPrefix = deployments.release.terraformPrefix;
            } else if ( branch === 'develop' ) {
              tfWorkspace = deployments.release.env;
              tfPrefix = deployments.release.terraformPrefix;              
            } else if ( branch === 'main' || branch === 'master' ) {
              tfWorkspace = deployments.release.env;
              tfPrefix = deployments.release.terraformPrefix;
            } else {
              core.setFailed('Branch not supported');
            }
            const outputV = { workspace: tfWorkspace, prefix: tfPrefix }; 
            core.setOutput('config', outputV);
            
            return outputV;

      - name: Terraform Workspace Check and Selection
        id: workspace_check
        run: |
          terraform workspace select ${{ steps.workspace.outputs.config.workspace }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Create Plan Directory
        run: mkdir -p ./.plans
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file ${{ steps.workspace.outputs.config.prefix }}.terraform.tfvars -input=false -no-color -out ./.plans/plan.out
        continue-on-error: ${{ steps.check_automatic.output.result != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"

      - uses: actions/upload-artifact@v3
        with:
          name: environment-release-plan
          path: ./.plans/plan.out
          #if-no-files-found: error

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Workspace üè¢\`${{ steps.workspace.outputs.config.workspace }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Hard Fail plan not success
        run: |
          result_fmt="${{ steps.fmt.outcome }}"
          result_init="${{ steps.init.outcome }}"
          result_plan="${{ steps.plan.outcome }}"
          
          if [[ "$result_fmt" == "success" && "$result_init" == "success" && "$result_plan" == "success" ]] ; then
            echo "All OK... nothing todo"
          else
            echo "FMT=$result_fmt\nINIT=$result_init\nPLAN=$result_plan\nIt's NOT OK, will hard fail."
            exit 1
          fi
  # Proceed with labeling if the procedure is candidate to be autoapproved
  label_autoapprove:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ needs.plan.outputs.auto_approve == 'true' }}
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approved', 'automatic-environment']
            })

  # Job to add the required reviewers and approvals to the PR
  add_reviewers_and_approvals:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ needs.plan.outputs.auto_approve != 'true' && needs.bluegreen.outputs.action != 'approved' }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Read reviewers from file
        id: reviewers
        run: |
          count=$(yq e '.requiredReviewers' OWNERS)
          reviewers_as_json=$(yq e -j -I=0 '.reviewers' OWNERS)
          echo "count=$count" >> $GITHUB_OUTPUT
          echo "as_json=$reviewers_as_json" >> $GITHUB_OUTPUT

      - name: Add review and approval labels
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const reviewers_json=JSON.parse('${{ steps.reviewers.outputs.as_json }}');
            const reviewers_count=${{ steps.reviewers.outputs.count }};
            const label='${{ needs.bluegreen.outputs.label }}';
            const nextlabel='${{ needs.bluegreen.outputs.nextlabel }}';
            const labels = ['approval-required','review-required'];
            const actor = '${{ github.event.pull_request.user.login }}'

            if ( nextlabel != '' )
              labels.push(nextlabel)

            var reviewers = []
            for ( const rev of reviewers_json ) {
              if ( actor != rev ) {
                reviewers.push(rev)
              }
            }

            github.rest.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: reviewers
            });

            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });

  # Place a do-not-merge label untl all the conditions are met
  #   the conditions are:
  #     labels are: blue-green/new or blue-green/complete
  do_not_merge_label:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ needs.plan.outputs.auto_approve != 'true' && needs.bluegreen.outputs.action != 'approved' }}
    outputs:
      is_mergeable: ${{ steps.check.outputs.result }}
    steps:
      - name: Set DO-NOT-MERGE if not in last step
        id: check
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const {data: pullLabels} = await github.rest.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const labels = pullLabels.map(label => label.name);

            var is_mergeable = false;

            for (const aLabel of labels) {
              if ( aLabel == 'blue-green/new' || aLabel == 'approved' ) {
                is_mergeable = true;
              }
            }

            if ( ! is_mergeable ) {
              github.rest.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [ 'do-not-merge' ]
              });
            }

            return ( is_mergeable ? 'true' : 'false' );

