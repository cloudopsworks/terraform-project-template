##
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Terraform Project Plan on Pull request
on:
  pull_request:
    paths-ignore:
      - ".github/workflows/**"
      - "modules/**"

permissions:
  contents: read
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Download yq Binary
        env:
          VERSION: v4.23.1
          BINARY: yq_linux_amd64
        run: |
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | tar xz && mv ${BINARY} /usr/local/bin/yq

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3

      - name: Check if automatic
        id: check_automatic
        run: |
          is_auto=$(yq e '.automatic' OWNERS)
          if [[ "$is_auto" != "true" ]] ; then
            is_auto=false
          fi
          echo "autoapprove=$is_auto" >> $GITHUB_OUTPUT

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      # Get Terraform SSM Parameter List
      - name: Get Terraform SSM Parameter List
        id: terraform_init
        uses: mikefarah/yq@master
        with:
          cmd: yq '.terraform.ssm-parameters[] | select(.type=="init").name' ./cloudopsworks-ci.yaml

      - name: Get region from terraform.tfvars
        id: aws_region
        uses: mikefarah/yq@master
        with:
          cmd: yq -p props '.aws_region' terraform.tfvars | tr -d \"

      - name: Download TF init file
        id: tf_backend
        if: steps.terraform_init.outputs.result != ''
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ steps.aws_region.outputs.result }}
        run: |
          ssm_param="${{ steps.terraform_init.outputs.result }}"
          mkdir .deploy
          aws ssm get-parameters --names $ssm_param --query "Parameters[0].Value" --output text > .deploy/remote.tfbackend
          
          echo "::set-output name=config::-backend-config=.deploy/remote.tfbackend"

      - name: Terraform Init
        id: init
        run: terraform init ${{ steps.tf_backend.outputs.config }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Create Plan Directory
        run: mkdir -p ./.plans
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out ./.plans/plan.out
        continue-on-error: ${{ steps.check_automatic.outputs.autoapprove != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"

      - uses: actions/upload-artifact@v2
        with:
          name: environment-release-plan
          path: ./.plans/plan.out
          #if-no-files-found: error

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - uses: actions/github-script@v6
        if: ${{ steps.check_automatic.outputs.autoapprove == 'true' }}
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approved', 'automatic-environment']
            })
      
      - name: Read reviewers from file
        id: reviewers
        if: ${{ steps.check_automatic.outputs.autoapprove != 'true' }}
        run: |
          count=$(yq e '.requiredReviewers' OWNERS)
          reviewers_as_json=$(yq e -j -I=0 '.reviewers' OWNERS)
          echo "count=$count" >> $GITHUB_OUTPUT
          echo "as_json=$reviewers_as_json" >> $GITHUB_OUTPUT

      - uses: actions/github-script@v6
        if: ${{ steps.check_automatic.outputs.autoapprove != 'true' }}
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const reviewers_json=JSON.parse('${{ steps.reviewers.outputs.as_json }}')
            const reviewers_count=${{ steps.reviewers.outputs.count }}

            github.rest.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: reviewers_json
            })

            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approval-required','review-required']
            })

      - name: Hard Fail plan not success
        run: |
          result_fmt="${{ steps.fmt.outcome }}"
          result_init="${{ steps.init.outcome }}"
          result_plan="${{ steps.plan.outcome }}"
          
          if [[ "$result_fmt" == "success" && "$result_init" == "success" && "$result_plan" == "success" ]] ; then
            echo "All OK... nothing todo"
          else
            echo "FMT=$result_fmt\nINIT=$result_init\nPLAN=$result_plan\nIt's NOT OK, will hard fail."
            exit 1
          fi