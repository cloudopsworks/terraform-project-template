# (c) 2023 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Process OWNERS file for configuration changes
on:
  push:
    # Owners can be changed only on the following branches
    branches:
      - master
      - main
    paths:
      - OWNERS
      - cloudopsworks-ci.yaml
  workflow_dispatch:

concurrency: owners-terraform-project

jobs:
  process-owners:
    runs-on: ubuntu-latest
    steps:
      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "owner=$repo_owner" >> $GITHUB_OUTPUT
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0

      - name: Retrieve branch protection rule
        uses: mikefarah/yq@v4.33.3
        id: branch_protection_rules
        with:
          cmd: yq '.branchProtection' OWNERS | grep true | wc -l

      - name: Retrieve protected sources
        uses: mikefarah/yq@v4.33.3
        id: protected_sources
        with:
          cmd: yq -o=json -I=0 '.protectedSources' OWNERS

      - name: Check if automatic
        uses: mikefarah/yq@v4.33.3
        id: check_automatic
        with:
          cmd: yq '.automatic' OWNERS | grep true | wc -l

      - name: Reviewers Count
        uses: mikefarah/yq@v4.33.3
        id: reviewers_count
        if: ${{ steps.check_automatic.outputs.result == 0 || steps.branch_protection_rules.outputs.result == 1 }}
        with:
          cmd: yq '.requiredReviewers' OWNERS

      - name: Reviewers list as JSON
        uses: mikefarah/yq@v4.33.3
        id: reviewers_list
        if: ${{ steps.check_automatic.outputs.result == 0 || steps.branch_protection_rules.outputs.result == 1 }}
        with:
          cmd: yq -o=json -I=0 '.reviewers' OWNERS

      - name: Owners list as JSON
        uses: mikefarah/yq@v4.33.3
        id: owners_list
        if: ${{ steps.branch_protection_rules.outputs.result == 1 }}
        with:
          cmd: yq -o=json -I=0 '.owners' OWNERS

      - name: Contributors list as JSON
        uses: mikefarah/yq@v4.33.3
        id: contrib_list
        with:
          cmd: yq -o=json -I=0 '.contributors' OWNERS

      - name: Protect Branch
        if: ${{ steps.branch_protection_rules.outputs.result == 1 }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const branch = context.payload.ref;
            const branchProtectionRules = ${{ steps.branch_protection_rules.outputs.result }};
            const protectedSourcesTxt = ${{ steps.protected_sources.outputs.result != 'null' }};
            const protectedSources = protectedSourcesTxt ? JSON.parse('${{ steps.protected_sources.outputs.result }}') : [];
            const reviewers_text = ${{ steps.reviewers_list.outputs.result != 'null' }};
            const reviewers_json = reviewers_text ? JSON.parse('${{ steps.reviewers_list.outputs.result }}') : [];
            const owners_text = ${{ steps.owners_list.outputs.result != 'null' }};
            const owners_json = owners_text ? JSON.parse('${{ steps.owners_list.outputs.result }}') : [];
            const contrib_text = ${{ steps.contrib_list.outputs.result != 'null' }};
            const contrib_json = contrib_text ? JSON.parse('${{ steps.contrib_list.outputs.result }}') : {};
            const reviewers_count = ${{ steps.reviewers_count.outputs.result != 'null' }} ? ${{ steps.reviewers_count.outputs.result }} : 0;
            const actor = context.actor;
            
            // Get reviewers list
            var reviewers = [];
            for ( const rev of reviewers_json ) {
                if ( actor != rev ) {
                    reviewers.push(rev);
                }
            };
            
            // Get owners list
            var owners = [];
            var owner_teams = [];
            for( const owner of owners_json ) {
              if ( owner.includes("/") ) {
                  team = owner.split("/");
                  owner_teams.push(team[1]);
                } else {
                  owners.push(owner);
                }
            };

            // Protect the Branch
            github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branch,
              required_status_checks: {
                strict: true,
                checks: [
                  { context: "plan" }
                ]
              },
              enforce_admins: false,
              required_pull_request_reviews: {
                dismiss_stale_reviews: false,
                require_code_owner_reviews: false,
                required_approving_review_count: reviewers_count,
                bypass_pull_request_allowances: {
                  users: owners,
                  teams: owner_teams
                }
              },
              restrictions: {
                users: owners,
                teams: owner_teams
              },
              allow_force_pushes: false,
              allow_deletions: false,
              required_linear_history: true,
              allow_squash_merge: true,
              allow_merge_commit: true,
              allow_rebase_merge: true,
              delete_branch_on_merge: false
            });
            
            // Parse the Contributors List and add them to the repository
            // Users are plain names teams are prefixed by the org name
            // The role names are case insensitive and match github's permissions.
            // The role names are: admin, triage, write, read
            // The default role is read
            // contrib_json format will be as follows:
            //    { "admin": ["user1", "user2"], "triage": ["user3", "org1/team1"], "write": ["user5", "org1/team2"], "read": ["user7", "user8"] }
            for ( const [role, members] of Object.entries(contrib_json) ) {
              for ( const member of members ) {
                if ( member.includes("/") ) {
                  // This is a team
                  const team = member.split("/");
                  github.rest.teams.addOrUpdateRepoPermissionsInOrg({
                    org: team[0],
                    team_slug: team[1],
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    permission: role
                  });
                } else {
                  // This is a user
                  github.rest.repos.addCollaborator({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    username: member,
                    permission: role
                  });
                }
              }
            }